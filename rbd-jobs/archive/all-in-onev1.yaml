apiVersion: batch/v1
kind: Job
metadata:
  name: total-job
  namespace: rook-ceph
  labels:
    app: ceph-toolbox-job
spec:
  template:
    spec:
      initContainers:
      - name: config-init-total
        image: quay.io/rcook/storage-rehost:toolbox
        command: ["/tini"]
        args: ["-g", "-s", "--", "/usr/local/bin/toolbox.sh", "--skip-watch"]
        imagePullPolicy: IfNotPresent
        env:
        - name: ROOK_ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              name: rook-ceph-mon
              key: admin-secret
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
        - name: mon-endpoint-volume
          mountPath: /etc/rook
      containers:
      - name: script-resync
        image: quay.io/rcook/storage-rehost:toolbox
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
          readOnly: true
        command:
        - "bash"
        - "-c"
        - |
          ## Image List in Array - Edit this for your Pool and Images
          ## Use this when you want specific images
          ## comment out when using below all image method
          declare -a arr=("scottpool4/mysql-pv-claim-wordpresse3330f81-bb9b-11ea-bd87-0a580a83002e" 
                          "scottpool4/wp-pv-claim-wordpresse335727c-bb9b-11ea-bd87-0a580a83002e"
                         )

          ## Uncomment below to read all images into an array for our pool
          ## supplying the Pool only
          # pool="scottpool4"
          # arr=()
          # while IFS= read -r line; do
          #  arr+=( "$pool/$line" )
          # done < <( rbd ls $pool )          
          
          j=0
          for i in "${arr[@]}"
          do
            echo "Analyzing Image $i"
            demoted="N"

            ## Resync
            #value=$( rbd mirror image status "$i" | head -4 | tail -1 )
            #echo "...RESYNC EVAL"
            #if [[ $value == *"image is primary"* ]]; then
              #echo "... ... is primary - do not resync $i"
              #echo "   ----"
            #else
              #echo "... ... not primary - resyncing image $i\n"
              #rbd mirror image resync "$i"
              #echo "   ----"
            #fi
            #echo ""

            ## Wait for images to come back clean and make sure they exist
            echo "...WAIT FOR CLEAN IMAGE"
            until rbd mirror image status $i | head -2 | tail -1 | grep -q "global_id:";
            do
              sleep 1;
            done
            echo "   ----"
            echo ""

            ## Check demote status
            echo "...DEMOTE EVAL"
            value=$( rbd mirror image status $i | head -4 | tail -1 )
            if [[ $value == *"image is primary"* ]]; then
              echo "...is primary - do the demote of $i"
              rbd mirror image demote $i
              demoted=Y
              echo "   ----"
            else
              echo "...not primary - do not demote $i"
              echo "   ----"           
            fi
            echo ""
            
            ## Check promote status
            echo "...PROMOTE EVAL"
            echo "... ... Was image $i demoted? $demoted"
            if [ $demoted == "N" ]; then
              value=$( rbd mirror image status $i | head -4 | tail -1 )
              if [[ $value == *"image is primary"* ]]; then
                echo "... ... ... is primary - do not promote $i"
                echo "   ----" 
              else
                echo "... ...not primary - promote image $i"
                rbd mirror image promote $i
                echo "   ----" 
              fi
            fi

            ((j++))
          done
      volumes:
      - name: mon-endpoint-volume
        configMap:
          name: rook-ceph-mon-endpoints
          items:
          - key: data
            path: mon-endpoints
      - name: ceph-config
        emptyDir: {}
      restartPolicy: Never
